/*
  Copyright (C) 2014      Vishal Parakh
  
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
  http://www.apache.org/licenses/LICENSE-2.0
 
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/

#ifndef _TUPL_PVT_CURSORFRAMESTACK_II
#define _TUPL_PVT_CURSORFRAMESTACK_II
#else 
#error  _TUPL_PVT_CURSORFRAMESTACK_II
#endif

#include "CursorFrameStack.hpp"

#include <algorithm>
#include <iterator>
#include <cassert>

namespace tupl { namespace pvt {

void CursorFrameStack::remove(const FrameId id) {
    const auto size = mCursorFrames.size();
    
    assert(id < size);
    
    if (id + 1 == size) {
        const auto rBegin = ++mCursorFrames.rbegin();
        const auto rEnd   = mCursorFrames.rend();
        
        const auto last =
            std::find_if_not(rBegin, rEnd,
                             [](const CursorFrame& cur) {
                                 return cur == CursorFrame();
                             });
        
        mCursorFrames.resize(size - std::distance(rBegin, last) - 1);
    } else {
        mCursorFrames[id] = std::move(CursorFrame());
    }
}

bool CursorFrameStack::empty() const {
    return mCursorFrames.empty();
}

const CursorFrame& CursorFrameStack::get(FrameId id) const {
    assert(id < mCursorFrames.size());
    return mCursorFrames[id];
}

CursorFrameStack::FrameId CursorFrameStack::emplaceBack(CursorFrame&& frame) {
    const size_type size = mCursorFrames.size();
    mCursorFrames.emplace_back(frame);
    
    return size;
}

} } // namespace tupl::pvt
